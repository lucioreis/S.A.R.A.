# Sapiens Test

```elixir
Node.set_cookie(:phoenix)
Node.connect(:phoenix@arch)

import Ecto.Changeset
import Ecto.Query, only: [from: 2], warn: false

alias Sapiens.Repo

alias Sapiens.{
  Estudantes,
  Professores,
  Cursos,
  Disciplinas,
  Turmas,
  Acerto,
  Plano,
  Alteracoes,
  Acerto
}
```

## Section

```elixir
{:ok, prof} = Professores.by_id(1, [:disciplinas])
{:ok, turma_one} = Turmas.by_id(2)
{:ok, turma_two} = Turmas.by_id(7)
{:ok, estudante} = Estudantes.by_id(2)
turma_one = Repo.preload(turma_one, :disciplina)
# Plano.adiciona(estudante, turma_one.disciplina)
# Professores.adiciona_turma(prof, turma_two)

teste = %{
  total: 100,
  nota: 0,
  local: "PVA 123",
  ordem: 1,
  hora: 18
}

# Sapiens.Historicos.create_teste(turma_one, {:P4, teste})
# |> Enum.map(fn changeset -> Repo.update!(changeset) end)

# status = Sapiens.Estudantes.get_status(estudante, turma_two)
# %{status | ef: 80, ft: 16} |> Sapiens.Estudantes.update_status()
# final_grade = Sapiens.Historicos.get_nota_final(estudante, turma_two)
# Sapiens.Historicos.set_historico_from_status(estudante.id, turma_two, status)
# Sapiens.Cursos.Historico.changeset(%Sapiens.Cursos.Historico{}, %{ano: 0, semestre: 0, turma_pratica: 9})"
# {:ok, turma_one} =
# Turmas.create_avaliacao(turma_one, %{
#  "nome" => "P1",
#    "local" => "PVB 123",
#    "nota" => 100,
#    "data" => ~D[2022-08-13],
#    "ordem" => 1,
#    "hora" => 18
#  })
#
use Timex
{:ok, historico} = Sapiens.Estudantes.get_historico(estudante, turma_one.disciplina)
Sapiens.Turmas.sync_estudantes(turma_one)
Timex.from_now(historico.updated_at)
```

```elixir
"""
SELECT *
  FROM public.disciplinas
LEFT OUTER JOIN public.disciplinas__estudantes
  ON disciplinas.ID = disciplinas__estudantes.disciplina_id
LEFT OUTER JOIN estudantes
  ON disciplinas__estudantes.estudante_id = estudantes.ID
"""

{:ok, one_t} = Turmas.by_id(1)
{:ok, two_t} = Turmas.by_id(2)
{:ok, three_t} = Turmas.by_id(6)
{:ok, one_d} = Disciplinas.by_id(1)
{:ok, two_d} = Disciplinas.by_id(2)

req_add = %Alteracoes.Request{
  client: nil,
  author: nil,
  action: :add,
  disciplina: one_d,
  time: nil,
  turma: one_t
}

req_remove = %Alteracoes.Request{
  client: nil,
  author: nil,
  action: :remove,
  disciplina: one_d,
  time: nil,
  turma: one_t
}

req_troca = %Alteracoes.Request{
  client: nil,
  author: nil,
  action: :change,
  disciplina: two_d,
  time: nil,
  turma: two_t
}

%Alteracoes.State{
  server: nil,
  client: nil,
  author: nil,
  disciplinas: [],
  matriculas: [],
  horario: nil,
  collisions: nil,
  commited: false
}
|> Alteracoes.update_state(req_add)
|> Alteracoes.update_state(req_remove)
```

### Teste get_turma_by_numero()

```elixir
{:ok, turma} = Turmas.by_id(2)
{:ok, estudante} = Estudantes.by_id(2)
Acerto.validar_horario(estudante, turma)
```

### Teste de inscrição em disciplina

```elixir
{:ok, estudante} = Estudantes.by_id(2)
{:ok, disciplina} = Disciplinas.by_id(1)
# Plano.remover_estudante_disciplina(estudante, disciplina)
# Disciplina.matricular_estudante(disciplina, estudante, 2)
alt = %Sapiens.Alteracoes{
  pid: self(),
  author: estudante,
  time: :qualquer,
  action: :remove,
  target: turma
}

{:ok, alts} = alts
Sapiens.Alteracoes.push(alts, alt)
Sapiens.Alteracoes.get(alts)
```

### Teste de desinscrição em disciplina

```elixir
{:ok, estudante} = Estudante.by_id(1)
{:ok, disciplina} = Disciplina.by_id(1)

p =
  Repo.get_by(Sapiens.Cursos.Historico,
    estudante_id: estudante.id,
    disciplina_id: disciplina.id,
    ano: 0,
    semestre: 1
  )

from(t in Sapiens.Cursos.Turma,
  join: et in Sapiens.Cursos.EstudanteTurma,
  on: et.turma_id == t.id,
  where: t.disciplina_id == 2
)
|> Repo.all()
```

```elixir
{:ok, es} = Estudante.by_id(2)
{:ok, dis} = Disciplina.by_id(3)
Estudante.add_disciplina(es, dis)
# Disciplina.desmatricular_estudante(dis, es)
Repo.get_by(Sapiens.Cursos.Turma, id: 1)
Estudante.get_horarios(es)
```

```elixir
Repo.get_by(Sapiens.Cursos.EstudanteTurma,
  estudante_id: 1,
  turma_id: 1
)

Repo.insert(%Sapiens.Cursos.EstudanteTurma{estudante_id: 1, turma_id: 1})
```
