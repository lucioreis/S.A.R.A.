# Sapiens Test

```elixir
Node.set_cookie(:phoenix)
Node.connect(:phoenix@arch)

import Ecto.Changeset
import Ecto.Query, only: [from: 2], warn: false

alias Sapiens.Repo

alias Sapiens.{
  Estudantes,
  Professores,
  Cursos,
  Disciplinas,
  Turmas,
  Acerto,
  Plano
}
```

## Section

```elixir
"""
SELECT *
  FROM public.disciplinas
LEFT OUTER JOIN public.disciplinas__estudantes
  ON disciplinas.ID = disciplinas__estudantes.disciplina_id
LEFT OUTER JOIN estudantes
  ON disciplinas__estudantes.estudante_id = estudantes.ID
"""

node()
```

### Teste get_turma_by_numero()

```elixir
{:ok, turma} = Turmas.by_id(2)
{:ok, estudante} = Estudantes.by_id(2)
Acerto.validar_horario(estudante, turma)
```

### Teste de inscrição em disciplina

```elixir
{:ok, estudante} = Estudantes.by_id(2)
{:ok, disciplina} = Disciplinas.by_id(1)
# Plano.remover_estudante_disciplina(estudante, disciplina)
# Disciplina.matricular_estudante(disciplina, estudante, 2)
alt = %Sapiens.Alteracoes{
  pid: self(),
  author: estudante,
  time: :qualquer,
  action: :remove,
  target: turma
}

{:ok, alts} = alts
Sapiens.Alteracoes.push(alts, alt)
Sapiens.Alteracoes.get(alts)
```

### Teste de desinscrição em disciplina

```elixir
{:ok, estudante} = Estudante.by_id(1)
{:ok, disciplina} = Disciplina.by_id(1)

p =
  Repo.get_by(Sapiens.Cursos.Historico,
    estudante_id: estudante.id,
    disciplina_id: disciplina.id,
    ano: 0,
    semestre: 1
  )

from(t in Sapiens.Cursos.Turma,
  join: et in Sapiens.Cursos.EstudanteTurma,
  on: et.turma_id == t.id,
  where: t.disciplina_id == 2
)
|> Repo.all()
```

```elixir
{:ok, es} = Estudante.by_id(2)
{:ok, dis} = Disciplina.by_id(3)
Estudante.add_disciplina(es, dis)
# Disciplina.desmatricular_estudante(dis, es)
Repo.get_by(Sapiens.Cursos.Turma, id: 1)
Estudante.get_horarios(es)
```

```elixir
Repo.get_by(Sapiens.Cursos.EstudanteTurma,
  estudante_id: 1,
  turma_id: 1
)

Repo.insert(%Sapiens.Cursos.EstudanteTurma{estudante_id: 1, turma_id: 1})
```
